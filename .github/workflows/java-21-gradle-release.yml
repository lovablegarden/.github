name: Release Template

on:
  workflow_call:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
    secrets:
      GITHUB_TOKEN:
        required: true
      GH_PACKAGES_TOKEN:
        description: 'GitHub Packages token for accessing private packages'
        required: false

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    name: Create Release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Build with Gradle
        env:
          CI: true
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN || github.token }}
        run: ./gradlew clean build --no-daemon

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ inputs.version }}
            type=raw,value=latest

      - name: Build and push release Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GITHUB_ACTOR=${{ github.actor }}
            GITHUB_TOKEN=${{ secrets.GH_PACKAGES_TOKEN || github.token }}

      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ inputs.version }} -m "Release version ${{ inputs.version }}"
          git push origin v${{ inputs.version }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ inputs.version }}
          release_name: Release v${{ inputs.version }}
          body: |
            ## Release v${{ inputs.version }}
            
            ### Docker Image
            - **Image**: `ghcr.io/${{ github.repository }}:${{ inputs.version }}`
            - **Latest**: `ghcr.io/${{ github.repository }}:latest`
            
            ### Changes
            - [Add your release notes here]
          draft: false
          prerelease: false

      - name: Prepare next development iteration
        run: |
          # Calculate next version
          CURRENT_VERSION="${{ inputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"
          
          echo "Next version: $NEXT_VERSION"
          
          # Update build.gradle
          sed -i "s/version = '.*'/version = '$NEXT_VERSION'/" build.gradle
          
          # Commit and push changes
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add build.gradle
          git commit -m "Bump version to $NEXT_VERSION for next development iteration"
          git push origin ${{ github.ref }}

      - name: Output next version
        run: |
          CURRENT_VERSION="${{ inputs.version }}"
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"
          echo "Next version: $NEXT_VERSION"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV 