name: CI Template

on:
  workflow_call:
    secrets:
      GH_PACKAGES_TOKEN:
        description: 'GitHub Packages token for accessing private packages'
        required: false

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Application
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Debug GitHub Packages access
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN || github.token }}
        run: |
          echo "=== GitHub Environment Debug ==="
          echo "GitHub Actor: $GITHUB_ACTOR"
          echo "GitHub Token: ${GITHUB_TOKEN:0:10}..."
          echo "Repository: ${{ github.repository }}"
          echo ""
          echo "=== Testing GitHub Packages Access ==="
          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/orgs/gardentalkz/packages/maven/se.gardentalkz.api.gardentalkz-api-auth/versions" \
               || echo "Failed to access package versions"
          echo ""
          echo "=== Testing Maven Repository Access ==="
          curl -H "Authorization: token $GITHUB_TOKEN" \
               "https://maven.pkg.github.com/gardentalkz/gardentalkz-openapi-spec/se/gardentalkz/api/gardentalkz-api-auth/1.0.0/gardentalkz-api-auth-1.0.0.pom" \
               || echo "Failed to access Maven artifact"

      - name: Build with Gradle
        env:
          CI: true
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN || github.token }}
        run: ./gradlew build --no-daemon --stacktrace

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Run tests
        env:
          CI: true
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN || github.token }}
        run: ./gradlew test --no-daemon --stacktrace

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/test/

  publish:
    runs-on: ubuntu-latest
    name: Publish Docker Image
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
          tags: |
            type=raw,value=1.0.0-SNAPSHOT
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GITHUB_ACTOR=${{ github.actor }}
            GITHUB_TOKEN=${{ secrets.GH_PACKAGES_TOKEN || github.token }} 