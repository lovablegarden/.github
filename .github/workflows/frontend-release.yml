name: Frontend Release

on:
  workflow_call:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: '20.x'
      lint-command:
        description: 'Command to run linting'
        required: false
        type: string
        default: 'npm run lint:ci'
      build-command:
        description: 'Command to build the project'
        required: false
        type: string
        default: 'npm run build'
      docker-registry:
        description: 'Docker registry to publish to'
        required: false
        type: string
        default: 'ghcr.io'
      project-name:
        description: 'Name of the project for Docker image'
        required: true
        type: string
      docker-enabled:
        description: 'Whether to build and publish Docker images'
        required: false
        type: boolean
        default: true
      create-archives:
        description: 'Whether to create archive files'
        required: false
        type: boolean
        default: true
      max-warnings:
        description: 'Maximum number of ESLint warnings allowed'
        required: false
        type: number
      docker-image-name:
        description: 'Custom Docker image name (defaults to github.repository)'
        required: false
        type: string
        default: 600
    secrets:
      GH_PACKAGES_TOKEN:
        description: 'GitHub token for authentication'
        required: true
      NPM_TOKEN:
        description: 'NPM token for private packages'
        required: false
    outputs:
      release-url:
        description: 'URL of the created release'
        value: ${{ jobs.release.outputs.release-url }}
      docker-image-tag:
        description: 'Docker image tag that was built'
        value: ${{ jobs.release.outputs.docker-image-tag }}
      next-snapshot:
        description: 'Next snapshot version'
        value: ${{ jobs.release.outputs.next-snapshot }}

jobs:
  release:
    runs-on: ubuntu-latest
    
    outputs:
      release-url: ${{ steps.create_release.outputs.html_url }}
      docker-image-tag: ${{ inputs.version }}
      next-snapshot: ${{ steps.next_version.outputs.next_snapshot }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: ${{ inputs.lint-command }} --max-warnings ${{ inputs.max-warnings }}
    
    - name: Build project
      run: ${{ inputs.build-command }}
    
    - name: Update package.json version
      run: |
        npm version ${{ inputs.version }} --no-git-tag-version
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "chore: bump version to ${{ inputs.version }}"
    
    - name: Set up Docker Buildx
      if: ${{ inputs.docker-enabled }}
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: ${{ inputs.docker-enabled }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.docker-registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN || github.token }}
    
    - name: Extract metadata for Docker
      if: ${{ inputs.docker-enabled }}
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.docker-registry }}/${{ inputs.docker-image-name || github.repository }}
        tags: |
          type=raw,value=${{ inputs.version }}
          type=raw,value=latest,enable=${{ !inputs.prerelease }}
        labels: |
          org.opencontainers.image.title=${{ inputs.project-name }}
          org.opencontainers.image.description=Frontend application for ${{ inputs.project-name }}
          org.opencontainers.image.version=${{ inputs.version }}
    
    - name: Build and push Docker image
      if: ${{ inputs.docker-enabled }}
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Create archive files
      if: ${{ inputs.create-archives }}
      run: |
        tar -czf ${{ inputs.project-name }}-${{ inputs.version }}.tar.gz dist/
        zip -r ${{ inputs.project-name }}-${{ inputs.version }}.zip dist/
    
    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ inputs.version }}
        release_name: Release v${{ inputs.version }}
        draft: false
        prerelease: ${{ inputs.prerelease }}
        body: |
          ## Release v${{ inputs.version }}
          
          ### Changes
          - Built from commit: ${{ github.sha }}
          - Build date: ${{ github.event.created_at }}
          - Project: ${{ inputs.project-name }}
          
          ${{ inputs.docker-enabled && format('### Docker Image
          ```bash
          docker pull {0}/{1}:{2}
          ```
          
          ', inputs.docker-registry, github.repository, inputs.version) || '' }}${{ inputs.create-archives && format('### Assets
          - `{0}-{1}.tar.gz` - Production build (tar.gz)
          - `{0}-{1}.zip` - Production build (zip)', inputs.project-name, inputs.version) || '' }}
    
    - name: Upload Release Asset (tar.gz)
      if: ${{ inputs.create-archives }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ inputs.project-name }}-${{ inputs.version }}.tar.gz
        asset_name: ${{ inputs.project-name }}-${{ inputs.version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload Release Asset (zip)
      if: ${{ inputs.create-archives }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ inputs.project-name }}-${{ inputs.version }}.zip
        asset_name: ${{ inputs.project-name }}-${{ inputs.version }}.zip
        asset_content_type: application/zip
    
    - name: Push version changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        tags: true
    
    - name: Calculate next snapshot version
      id: next_version
      run: |
        CURRENT_VERSION="${{ inputs.version }}"
        # Extract major, minor, patch from current version (e.g., 1.0.0 -> 1, 0, 0)
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        # Increment patch version for next snapshot
        NEXT_PATCH=$((PATCH + 1))
        NEXT_SNAPSHOT="${MAJOR}.${MINOR}.${NEXT_PATCH}-SNAPSHOT"
        
        echo "next_snapshot=$NEXT_SNAPSHOT" >> $GITHUB_OUTPUT
        echo "Next snapshot version will be: $NEXT_SNAPSHOT"
    
    - name: Update to next snapshot version
      run: |
        npm version ${{ steps.next_version.outputs.next_snapshot }} --no-git-tag-version
        git add package.json package-lock.json
        git commit -m "chore: prepare for next development iteration ${{ steps.next_version.outputs.next_snapshot }}"
    
    - name: Push snapshot version
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
    
    - name: Create Release Summary
      run: |
        echo "## üöÄ Frontend Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Release | ‚úÖ v${{ inputs.version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Prerelease | ${{ inputs.prerelease && '‚úÖ Yes' || '‚ùå No' }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.docker-enabled }}" == "true" ]]; then
          echo "| Docker Image | ‚úÖ Published |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Docker Image | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ inputs.create-archives }}" == "true" ]]; then
          echo "| Archives | ‚úÖ Created |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Archives | ‚è≠Ô∏è Skipped |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project:** ${{ inputs.project-name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Next Snapshot:** ${{ steps.next_version.outputs.next_snapshot }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release URL:** ${{ steps.create_release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.docker-enabled }}" == "true" ]]; then
          echo "**Docker Image:** \`${{ inputs.docker-registry }}/${{ github.repository }}:${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Release Success
      run: |
        echo "‚úÖ Release v${{ inputs.version }} created successfully!"
        echo "üê≥ Docker image: ${{ inputs.docker-registry }}/${{ github.repository }}:${{ inputs.version }}"
        echo "üöÄ Project updated to next snapshot version: ${{ steps.next_version.outputs.next_snapshot }}"
        echo "üîó Release URL: ${{ steps.create_release.outputs.html_url }}" 
